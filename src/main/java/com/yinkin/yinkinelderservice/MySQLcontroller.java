package com.yinkin.yinkinelderservice;
import com.amazonaws.services.ec2.model.transform.AccountAttributeValueStaxUnmarshaller;
import com.yinkin.yinkinelderservice.model.Account;
import com.yinkin.yinkinelderservice.model.User;
import com.yinkin.yinkinelderservice.model.Message;
import com.yinkin.yinkinelderservice.model.UserRepository;
import com.yinkin.yinkinelderservice.model.MessageRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


@Controller
@RequestMapping(path="/demo") 
public class MySQLcontroller {
  
  @Autowired      // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @Autowired
  private MessageRepository messageRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String name
      , @RequestParam String email) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    User n = new User();
    n.setName(name);
    n.setEmail(email);
    userRepository.save(n);
    return "Saved";
  }

  @PostMapping(path="/addMsg") // Map ONLY POST Requests
  public String addMessage (@RequestParam String message) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Message m = new Message();
    m.setName("");
    m.setEmail("");
    m.setMessage(message);
    messageRepository.save(m);
    //return "bubblechat";
    return "redirect:/bubblechat";
  }

//   @PostMapping(path="/msg")
//   public @ResponseBody String addMessage (@RequestPara
      
//   )

  @GetMapping(path="/allMsg")
  public @ResponseBody Iterable<Message> getAllMsgs() {
    // This returns a JSON or XML with the users
    return messageRepository.findAll();
  }

  @GetMapping
    public String register(Model model) {
	   // model.addAttribute("demo", new User());
        return "demo";
    }

}
